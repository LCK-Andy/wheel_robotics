Excellent ‚Äî let‚Äôs level up üöÄ  
This time we‚Äôll go beyond simple circular motion and do a **Lagrangian analysis of a pendulum on a moving cart**, a **two-degree-of-freedom dynamic system** that still retains circular motion (the pendulum swings along a circular arc).

---

## ‚öôÔ∏è Problem Setup ‚Äî Pendulum on a Moving Cart

Imagine a cart of mass \( M \) that can move horizontally without friction, carrying a pendulum of length \( l \) and mass \( m \).

- **Generalized coordinates:**
  - \( x(t) \): horizontal displacement of the cart  
  - \( \theta(t) \): angular displacement of the pendulum from the vertical  

This is a **2D circular motion system** (the pendulum bob moves on a circular arc) combined with **translational motion**.

---

### üß≠ Goal

Use **Euler‚ÄìLagrange equations** to derive the **coupled equations of motion** symbolically.

---

### üíª Sympy Implementation

```python
import sympy as sp

# Define time and symbols
t = sp.Symbol('t', real=True)
M, m, l, g = sp.symbols('M m l g', positive=True)

# Generalized coordinates
x = sp.Function('x')(t)       # cart position
theta = sp.Function('theta')(t)  # pendulum angle
x_dot = sp.diff(x, t)
theta_dot = sp.diff(theta, t)

# Cartesian coordinates of pendulum bob
x_p = x + l * sp.sin(theta)
y_p = -l * sp.cos(theta)

# Kinetic energy (cart + pendulum)
T_cart = (1/2) * M * x_dot**2
T_pendulum = (1/2) * m * (sp.diff(x_p, t)**2 + sp.diff(y_p, t)**2)
T = sp.simplify(T_cart + T_pendulum)

# Potential energy (take zero at pendulum pivot)
V = m * g * l * (1 - sp.cos(theta))  # height change relative to hanging position

# Lagrangian
L = T - V

# Compute Euler‚ÄìLagrange equations for x(t) and Œ∏(t)
coords = [x, theta]
EL_eqs = []
for q in coords:
    dL_dqdot = sp.diff(L, sp.diff(q, t))
    dL_dq = sp.diff(L, q)
    EL = sp.diff(dL_dqdot, t) - dL_dq
    EL_eqs.append(sp.simplify(EL))

# The two equations of motion
E1, E2 = EL_eqs  # E1 for x(t), E2 for theta(t)

print("Euler‚ÄìLagrange Equation for x(t):")
sp.pprint(sp.Eq(E1, 0))

print("\nEuler‚ÄìLagrange Equation for Œ∏(t):")
sp.pprint(sp.Eq(E2, 0))
```

---

### üßÆ Symbolic Results (Simplified Form)

After simplifying, you'll get the **two coupled nonlinear equations**:

\[
(M + m)\ddot{x} + m l(\ddot{\theta}\cos\theta - \dot{\theta}^2\sin\theta) = 0
\]

\[
l\ddot{\theta} + \ddot{x}\cos\theta + g\sin\theta = 0
\]

These describe how the cart and pendulum interact dynamically.

---

### üß† Insight

- When the **cart is fixed** (\( \ddot{x} = 0 \)), the second equation reduces to the **simple pendulum**:  
  \[
  l\ddot{\theta} + g\sin\theta = 0
  \]

- When the cart moves, its acceleration directly affects the pendulum‚Äôs angular motion, resulting in a **coupled mechanical system** ‚Äî famous in **control theory** (inverted pendulum problem).

---

### ‚öôÔ∏è Optional Linearization (Small Angles)

For small angles (\( \sin\theta \approx \theta,\ \cos\theta \approx 1 \)),  
we can **linearize** the system with `sympy.series()` or `sp.simplify()` to obtain:

\[
(M + m)\ddot{x} + m l \ddot{\theta} = 0
\]
\[
l \ddot{\theta} + \ddot{x} + g \theta = 0
\]

Which can be used for designing **control systems**.

---

### üöÄ Applications

- **Self-balancing robots** (e.g., Segway)  
- **Rocket launch systems** and **crane payload sway**  
- **Robotics** ‚Äî arms mounted on moving platforms  
- **Inverted pendulum** stability analysis  

---

Would you like me to extend this and show how to **solve these coupled equations symbolically** for small angles (or simulate the motion numerically and plot it)?